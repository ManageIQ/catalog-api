swagger: '2.0'
info:
  description: This is a API to fetch and order catalog items from different cloud sources
  version: 0.0.1
  title: Service Portal API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
securityDefinitions:
  UserSecurity:
    type: basic
  AdminSecurity:
    type: basic
security:
  - UserSecurity: []
  - AdminSecurity: []
tags:
  - name: admins
    description: Secured Admin-only calls
  - name: users
    description: Calls available to both regular users and admins
paths:
  /portfolios:
    get:
      tags:
        - users
        - admins
      summary: API to list portfolios
      operationId: listPortfolios
      description: |
        Returns an array of portfolio objects
      produces:
        - application/json
      consumes:
        - application/json
      responses:
        '200':
          description: Portfolio Info
          schema:
            type: array
            items:
              $ref: '#/definitions/Portfolio'
        '400':
          description: bad input parameter
    post:
      tags:
        - admins
      summary: API to add a new portfolio
      operationId: addPortfolio
      description: |
        Returns the added portfolio object
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Portfolio'
      responses:
        '200':
          description: Portfolio Info
          schema:
            type: object
            items:
              $ref: '#/definitions/Portfolio'
        '400':
          description: bad input parameter
  '/portfolios/{portfolio_id}':
    get:
      tags:
        - users
        - admins
      summary: Fetch a specific Portfolio
      operationId: fetchPortfolioWithId
      description: |
        By passing in the portfolio id you can fetch a specific portfolio.
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/PortfolioID'
      responses:
        '200':
          description: portfolio results matching the portfolio id
          schema:
            $ref: '#/definitions/Portfolio'
  '/portfolios/{portfolio_id}/portfolio_items':
    get:
      tags:
        - users
        - admins
      summary: Fetch all portfolio items from a specific portfolio
      operationId: fetchPortfolioItemsWithPortfolio
      description: >
        By passing in the portfolio id you can fetch all the portfolio items in
        the portfolio.
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/PortfolioID'
      responses:
        '200':
          description: returns matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/PortfolioItem'
        '400':
          description: bad input parameter
    post:
      tags:
        - admins
      summary: Add Portfolio item to a portfolio
      operationId: addPortfolioItemToPortfolio
      description: |
        Add new portfolio item to an existing portfolio
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - $ref: '#/parameters/PortfolioID'
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AddPortfolioItem'
      responses:
        '200':
          description: Successfully added a portfolio item to portfolio
        '400':
          description: bad input parameter
  '/portfolios/{portfolio_id}/portfolio_items/{portfolio_item_id}':
    get:
      tags:
        - users
        - admins
      summary: Fetch a portfolio item from a specific portfolio
      operationId: fetchPortfolioItemFromPortfolio
      description: >
        By passing in the portfolio id and portfolio_item_id you can fetch the
        portfolio items in the portfolio.
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/PortfolioID'
        - $ref: '#/parameters/PortfolioItemID'
      responses:
        '200':
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/PortfolioItem'
        '400':
          description: bad input parameter
  /portfolio_items:
    get:
      tags:
        - users
        - admins
      summary: API to list portfolio_items
      operationId: listPortfolioItems
      description: |
        Returns an array of portfolio item objects
      produces:
        - application/json
      consumes:
        - application/json
      responses:
        '200':
          description: Portfolio Item Info
          schema:
            type: array
            items:
              $ref: '#/definitions/PortfolioItem'
        '400':
          description: bad input parameter
    post:
      tags:
        - admins
      summary: API to add a new portfolio item
      operationId: addPortfolioItem
      description: |
        Returns the added portfolio item object
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreatePortfolioItem'
      responses:
        '200':
          description: Portfolio Item Info
          schema:
            type: object
            items:
              $ref: '#/definitions/PortfolioItem'
        '400':
          description: bad input parameter
  '/portfolio_items/{portfolio_item_id}/service_plans':
    get:
      tags:
        - users
        - admins
      summary: Fetches all the service plans for a specific portfolio item
      operationId: fetchPlansWithPortfolioItemId
      description: |
        Fetch all service plans for a portfolio item
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/PortfolioItemID'
      responses:
        '200':
          description: All Service Plans
          schema:
            type: array
            items:
              $ref: '#/definitions/ServicePlan'
        '400':
          description: bad input parameter
  /orders:
    get:
      tags:
        - users
        - admins
      summary: Get a list of orders
      operationId: listOrders
      description: |
        Get a list of orders associated with the logged in user.
      produces:
        - application/json
      responses:
        '200':
          description: Returns an array of Order objects
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'
    post:
      tags:
        - admins
      summary: Create a new order
      operationId: newOrder
      description: |
        Create a new order.
      produces:
        - application/json
      responses:
        '200':
          description: Returns a newly created order object
          schema:
            $ref: '#/definitions/Order'
  '/orders/{order_id}/items':
    get:
      tags:
        - users
        - admins
      summary: Get a list of items in a given order
      operationId: listOrderItems
      description: |
        Get a list of items associated with an order.
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/OrderID'
      responses:
        '200':
          description: Returns an array of OrderIem objects
          schema:
            type: array
            items:
              $ref: '#/definitions/OrderItem'
    post:
      tags:
        - users
        - admins
      summary: Add a Portfolio Item to the Order in Pending State
      operationId: addToOrder
      description: |
        Add a catalog item to the order in Pending State
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - $ref: '#/parameters/OrderID'
        - in: body
          name: item
          required: true
          schema:
            $ref: '#/definitions/OrderItem'
      responses:
        '200':
          description: Successfully added an item to order
        '400':
          description: bad input parameter
        '404':
          description: cannot add to a order which has already been ordered.
  '/orders/{order_id}/items/{order_item_id}':
    get:
      tags:
        - users
        - admins
      summary: Get an individual item from a given order
      operationId: listOrderItem
      description: |
        Get an item associated with an order.
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/OrderID'
        - $ref: '#/parameters/OrderItemID'
      responses:
        '200':
          description: Returns a single OrderIem object
          schema:
            $ref: '#/definitions/OrderItem'
  '/orders/{order_id}':
    post:
      tags:
        - admins
      summary: Submit the given order
      operationId: submitOrder
      description: |
        Returns an updated order object
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/OrderID'
      responses:
        '200':
          description: Updated Order object
          schema:
            $ref: '#/definitions/Order'
        '400':
          description: 'Order is empty, nothing to order'
  '/order_items/{order_item_id}/progress_messages':
    get:
      tags:
        - users
        - admins
      summary: Get a list of progress messages in an item
      operationId: listProgressMessages
      description: >
        Get a list of progress messages associated with an order item. As the
        item is being processed the provider can update the progress messages
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/OrderItemID'
      responses:
        '200':
          description: Returns an array of ProgressMessage objects
          schema:
            type: array
            items:
              $ref: '#/definitions/ProgressMessage'
parameters:
  PortfolioID:
    name: portfolio_id
    in: path
    description: The Portfolio ID
    required: true
    type: string
  PortfolioItemID:
    name: portfolio_item_id
    in: path
    description: The Portfolio Item ID
    required: true
    type: string
  OrderID:
    name: order_id
    in: path
    description: The Order ID
    required: true
    type: string
  OrderItemID:
    name: order_item_id
    in: path
    description: The Order Item ID
    required: true
    type: string
definitions:
  Portfolio:
    type: object
    required:
      - name
      - description
    properties:
      id:
        type: string
        readOnly: true
      name:
        type: string
        title: Name
        example: Sample Portfolio
      description:
        type: string
        title: Description
        example: This is a sample description for a portfolio
      enabled:
        type: boolean
        title: Enabled
        example: Is the portfolio enabled
      image_url:
        type: string
        title: Image URL
        format: url
        example: The public facing image url for a portfolio
  CreatePortfolioItem:
    type: object
    properties:
      service_offering_ref:
        type: string
        title: Service Offering Ref
        example: The Service Offering Reference
  AddPortfolioItem:
    type: object
    properties:
      portfolio_item_id:
        type: string
        title: Portfolio Item Id
        example: The Portfolio Item Id
  PortfolioItem:
    type: object
    properties:
      id:
        type: string
        readOnly: true
      favorite:
        type: boolean
        title: Favorite
        example: Definition of a favorite portfolio item
      name:
        type: string
        title: Name
        example: Name of the portfolio item
      description:
        type: string
        title: Description
        example: Description of a portfolio item
      orphan:
        type: boolean
        readOnly: true
        title: Orphan
        example: Boolean if an associated catalog item no longer exists
      state:
        type: string
        readOnly: true
        title: State
        example: The current state of a portfolio item
  Order:
    type: object
    properties:
      id:
        type: string
        format: uuid
        readOnly: true
      user_id:
        type: string
        format: uuid
        readOnly: true
      state:
        type: string
        enum:
          - Created
          - Ordered
          - Failed
          - Completed
        title: State
        description: Current State of the order
      created_at:
        type: string
        format: date-time
        title: Created at
      ordered_at:
        type: string
        format: date-time
        title: Ordered at
      completed_at:
        type: string
        format: date-time
        title: Completed at
      order_items:
        type: array
        items:
          $ref: '#/definitions/OrderItem'
  OrderItem:
    type: object
    required:
      - service_parameters
      - count
      - service_plan_ref
      - portfolio_item_id
      - order_id
      - provider_control_parameters
    properties:
      id:
        type: string
        readOnly: true
      count:
        type: integer
        default: 1
        title: Item Count
      service_parameters:
        type: object
        title: JSON object with provisioning parameters
      provider_control_parameters:
        type: object
        title: Provider Control Parameters
        description: >-
          The provider specific parameters needed to provision this service.
          This might include namespaces, special keys
      service_plan_ref:
        type: string
        title: The Service Plan ref
        description: Stores the Plan ref from the Topology Service
      portfolio_item_id:
        type: string
        title: Portfolio Item ID
        description: Stores the Portfolio Item ID
      order_id:
        type: string
        description: ID of the order object
        title: Order ID
      state:
        type: string
        enum:
          - Created
          - Ordered
          - Failed
          - Completed
        title: State
        description: Current State of this order item
        readOnly: true
      created_at:
        type: string
        format: date-time
        title: Created at
        readOnly: true
      ordered_at:
        type: string
        format: date-time
        title: Ordered at
        readOnly: true
      completed_at:
        type: string
        format: date-time
        title: Completed at
        readOnly: true
      updated_at:
        type: string
        format: date-time
        title: Completed at
        readOnly: true
      external_ref:
        type: string
        description: >-
          An external reference from the provider that can be used to track the
          progress of the order item
        title: External Reference
        readOnly: true
  ProgressMessage:
    type: object
    properties:
      received_at:
        type: string
        format: date-time
        title: Message Received At
        readOnly: true
      level:
        type: string
        readOnly: true
        enum:
          - info
          - error
          - warning
          - debug
      message:
        type: string
        example: This is a sample message
        title: Message
        readOnly: true
      order_item_id:
        type: string
        title: Order Item ID
        readOnly: true
        format: uuid
  ServicePlan:
    type: object
    properties:
      name:
        type: string
        title: Name
        description: The name of the Service Plan
        readOnly: true
      description:
        type: string
        title: Description
        description: The Service Plan description
        readOnly: true
      id:
        type: string
        title: ID
        description: The unique identifier for this Service Plan
        readOnly: true
      create_json_schema:
        type: object
        title: JSON Schema
        description: JSON Schema for the object
        readOnly: true
host: localhost
schemes:
  - https
  - http
basePath: /api/v0.0/
